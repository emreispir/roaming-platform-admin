/**
 * CPMS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ChargePointAccessibility } from '../model/chargePointAccessibility';
// @ts-ignore
import { ChargePointStatus } from '../model/chargePointStatus';
// @ts-ignore
import { ChargingLevel } from '../model/chargingLevel';
// @ts-ignore
import { ChargingPowerType } from '../model/chargingPowerType';
// @ts-ignore
import { ConnectorType } from '../model/connectorType';
// @ts-ignore
import { RoamingPointDto } from '../model/roamingPointDto';
// @ts-ignore
import { RoamingPointSimpleDto } from '../model/roamingPointSimpleDto';
// @ts-ignore
import { RoamingPointStopChargeCommand } from '../model/roamingPointStopChargeCommand';
// @ts-ignore
import { RoamingSessionDto } from '../model/roamingSessionDto';
// @ts-ignore
import { RoamingStartChargeCommand } from '../model/roamingStartChargeCommand';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class RoamingPointsService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param id 
     * @param userId 
     * @param chargePointInterestId 
     * @param xApplicationClientId ApplicationClientId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chargePointInterestsIdActiveSessionsGet(id: string, userId?: string, chargePointInterestId?: string, xApplicationClientId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<Array<RoamingSessionDto>>;
    public chargePointInterestsIdActiveSessionsGet(id: string, userId?: string, chargePointInterestId?: string, xApplicationClientId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<RoamingSessionDto>>>;
    public chargePointInterestsIdActiveSessionsGet(id: string, userId?: string, chargePointInterestId?: string, xApplicationClientId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<RoamingSessionDto>>>;
    public chargePointInterestsIdActiveSessionsGet(id: string, userId?: string, chargePointInterestId?: string, xApplicationClientId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling chargePointInterestsIdActiveSessionsGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (userId !== undefined && userId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>userId, 'UserId');
        }
        if (chargePointInterestId !== undefined && chargePointInterestId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>chargePointInterestId, 'ChargePointInterestId');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xApplicationClientId !== undefined && xApplicationClientId !== null) {
            localVarHeaders = localVarHeaders.set('X-ApplicationClientId', String(xApplicationClientId));
        }

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/charge-point-interests/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/active-sessions`;
        return this.httpClient.request<Array<RoamingSessionDto>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param latitude 
     * @param longitude 
     * @param xApplicationClientId ApplicationClientId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chargePointInterestsIdGet(id: string, latitude?: number, longitude?: number, xApplicationClientId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<RoamingPointDto>;
    public chargePointInterestsIdGet(id: string, latitude?: number, longitude?: number, xApplicationClientId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<RoamingPointDto>>;
    public chargePointInterestsIdGet(id: string, latitude?: number, longitude?: number, xApplicationClientId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<RoamingPointDto>>;
    public chargePointInterestsIdGet(id: string, latitude?: number, longitude?: number, xApplicationClientId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling chargePointInterestsIdGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (latitude !== undefined && latitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>latitude, 'latitude');
        }
        if (longitude !== undefined && longitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>longitude, 'longitude');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xApplicationClientId !== undefined && xApplicationClientId !== null) {
            localVarHeaders = localVarHeaders.set('X-ApplicationClientId', String(xApplicationClientId));
        }

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/charge-point-interests/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<RoamingPointDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param xApplicationClientId ApplicationClientId
     * @param roamingStartChargeCommand 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chargePointInterestsIdStartPost(id: string, xApplicationClientId?: string, roamingStartChargeCommand?: RoamingStartChargeCommand, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<RoamingSessionDto>;
    public chargePointInterestsIdStartPost(id: string, xApplicationClientId?: string, roamingStartChargeCommand?: RoamingStartChargeCommand, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<RoamingSessionDto>>;
    public chargePointInterestsIdStartPost(id: string, xApplicationClientId?: string, roamingStartChargeCommand?: RoamingStartChargeCommand, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<RoamingSessionDto>>;
    public chargePointInterestsIdStartPost(id: string, xApplicationClientId?: string, roamingStartChargeCommand?: RoamingStartChargeCommand, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling chargePointInterestsIdStartPost.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xApplicationClientId !== undefined && xApplicationClientId !== null) {
            localVarHeaders = localVarHeaders.set('X-ApplicationClientId', String(xApplicationClientId));
        }

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/charge-point-interests/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/start`;
        return this.httpClient.request<RoamingSessionDto>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: roamingStartChargeCommand,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param xApplicationClientId ApplicationClientId
     * @param roamingPointStopChargeCommand 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chargePointInterestsIdStopPost(id: string, xApplicationClientId?: string, roamingPointStopChargeCommand?: RoamingPointStopChargeCommand, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<boolean>;
    public chargePointInterestsIdStopPost(id: string, xApplicationClientId?: string, roamingPointStopChargeCommand?: RoamingPointStopChargeCommand, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<boolean>>;
    public chargePointInterestsIdStopPost(id: string, xApplicationClientId?: string, roamingPointStopChargeCommand?: RoamingPointStopChargeCommand, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<boolean>>;
    public chargePointInterestsIdStopPost(id: string, xApplicationClientId?: string, roamingPointStopChargeCommand?: RoamingPointStopChargeCommand, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling chargePointInterestsIdStopPost.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xApplicationClientId !== undefined && xApplicationClientId !== null) {
            localVarHeaders = localVarHeaders.set('X-ApplicationClientId', String(xApplicationClientId));
        }

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/charge-point-interests/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/stop`;
        return this.httpClient.request<boolean>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: roamingPointStopChargeCommand,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param chargingPowerTypes 
     * @param statuses 
     * @param chargingLevels 
     * @param accessibilities 
     * @param connectorTypes 
     * @param minPrice 
     * @param maxPrice 
     * @param minLatitude 
     * @param maxLatitude 
     * @param minLongitude 
     * @param maxLongitude 
     * @param q 
     * @param latitude 
     * @param longitude 
     * @param radius 
     * @param surgeAvailable 
     * @param isGreenEnergy 
     * @param hasCampaign 
     * @param campaignId 
     * @param isCarPlayQuery 
     * @param xApplicationClientId ApplicationClientId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chargePointInterestsNearbyGet(chargingPowerTypes?: Array<ChargingPowerType>, statuses?: Array<ChargePointStatus>, chargingLevels?: Array<ChargingLevel>, accessibilities?: Array<ChargePointAccessibility>, connectorTypes?: Array<ConnectorType>, minPrice?: number, maxPrice?: number, minLatitude?: number, maxLatitude?: number, minLongitude?: number, maxLongitude?: number, q?: string, latitude?: number, longitude?: number, radius?: number, surgeAvailable?: boolean, isGreenEnergy?: boolean, hasCampaign?: boolean, campaignId?: string, isCarPlayQuery?: boolean, xApplicationClientId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<Array<RoamingPointSimpleDto>>;
    public chargePointInterestsNearbyGet(chargingPowerTypes?: Array<ChargingPowerType>, statuses?: Array<ChargePointStatus>, chargingLevels?: Array<ChargingLevel>, accessibilities?: Array<ChargePointAccessibility>, connectorTypes?: Array<ConnectorType>, minPrice?: number, maxPrice?: number, minLatitude?: number, maxLatitude?: number, minLongitude?: number, maxLongitude?: number, q?: string, latitude?: number, longitude?: number, radius?: number, surgeAvailable?: boolean, isGreenEnergy?: boolean, hasCampaign?: boolean, campaignId?: string, isCarPlayQuery?: boolean, xApplicationClientId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<RoamingPointSimpleDto>>>;
    public chargePointInterestsNearbyGet(chargingPowerTypes?: Array<ChargingPowerType>, statuses?: Array<ChargePointStatus>, chargingLevels?: Array<ChargingLevel>, accessibilities?: Array<ChargePointAccessibility>, connectorTypes?: Array<ConnectorType>, minPrice?: number, maxPrice?: number, minLatitude?: number, maxLatitude?: number, minLongitude?: number, maxLongitude?: number, q?: string, latitude?: number, longitude?: number, radius?: number, surgeAvailable?: boolean, isGreenEnergy?: boolean, hasCampaign?: boolean, campaignId?: string, isCarPlayQuery?: boolean, xApplicationClientId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<RoamingPointSimpleDto>>>;
    public chargePointInterestsNearbyGet(chargingPowerTypes?: Array<ChargingPowerType>, statuses?: Array<ChargePointStatus>, chargingLevels?: Array<ChargingLevel>, accessibilities?: Array<ChargePointAccessibility>, connectorTypes?: Array<ConnectorType>, minPrice?: number, maxPrice?: number, minLatitude?: number, maxLatitude?: number, minLongitude?: number, maxLongitude?: number, q?: string, latitude?: number, longitude?: number, radius?: number, surgeAvailable?: boolean, isGreenEnergy?: boolean, hasCampaign?: boolean, campaignId?: string, isCarPlayQuery?: boolean, xApplicationClientId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (chargingPowerTypes) {
            chargingPowerTypes.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'ChargingPowerTypes');
            })
        }
        if (statuses) {
            statuses.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'Statuses');
            })
        }
        if (chargingLevels) {
            chargingLevels.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'ChargingLevels');
            })
        }
        if (accessibilities) {
            accessibilities.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'Accessibilities');
            })
        }
        if (connectorTypes) {
            connectorTypes.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'ConnectorTypes');
            })
        }
        if (minPrice !== undefined && minPrice !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minPrice, 'MinPrice');
        }
        if (maxPrice !== undefined && maxPrice !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxPrice, 'MaxPrice');
        }
        if (minLatitude !== undefined && minLatitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minLatitude, 'MinLatitude');
        }
        if (maxLatitude !== undefined && maxLatitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxLatitude, 'MaxLatitude');
        }
        if (minLongitude !== undefined && minLongitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minLongitude, 'MinLongitude');
        }
        if (maxLongitude !== undefined && maxLongitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxLongitude, 'MaxLongitude');
        }
        if (q !== undefined && q !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>q, 'Q');
        }
        if (latitude !== undefined && latitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>latitude, 'Latitude');
        }
        if (longitude !== undefined && longitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>longitude, 'Longitude');
        }
        if (radius !== undefined && radius !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>radius, 'Radius');
        }
        if (surgeAvailable !== undefined && surgeAvailable !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>surgeAvailable, 'SurgeAvailable');
        }
        if (isGreenEnergy !== undefined && isGreenEnergy !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isGreenEnergy, 'IsGreenEnergy');
        }
        if (hasCampaign !== undefined && hasCampaign !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>hasCampaign, 'HasCampaign');
        }
        if (campaignId !== undefined && campaignId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>campaignId, 'CampaignId');
        }
        if (isCarPlayQuery !== undefined && isCarPlayQuery !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isCarPlayQuery, 'IsCarPlayQuery');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xApplicationClientId !== undefined && xApplicationClientId !== null) {
            localVarHeaders = localVarHeaders.set('X-ApplicationClientId', String(xApplicationClientId));
        }

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/charge-point-interests/nearby`;
        return this.httpClient.request<Array<RoamingPointSimpleDto>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
