/**
 * CPMS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { HolderPlatform } from '../model/holderPlatform';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class NomuPayCallbackService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param orderId 
     * @param mPAY 
     * @param statusCode 
     * @param resultCode 
     * @param resultMessage 
     * @param extraParam 
     * @param redirectUrl 
     * @param xApplicationClientId ApplicationClientId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public nomupaySaleWithTicketErrorPost(orderId: string, mPAY: string, statusCode: number, resultCode: string, resultMessage: string, extraParam: string, redirectUrl?: string, xApplicationClientId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public nomupaySaleWithTicketErrorPost(orderId: string, mPAY: string, statusCode: number, resultCode: string, resultMessage: string, extraParam: string, redirectUrl?: string, xApplicationClientId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public nomupaySaleWithTicketErrorPost(orderId: string, mPAY: string, statusCode: number, resultCode: string, resultMessage: string, extraParam: string, redirectUrl?: string, xApplicationClientId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public nomupaySaleWithTicketErrorPost(orderId: string, mPAY: string, statusCode: number, resultCode: string, resultMessage: string, extraParam: string, redirectUrl?: string, xApplicationClientId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling nomupaySaleWithTicketErrorPost.');
        }
        if (mPAY === null || mPAY === undefined) {
            throw new Error('Required parameter mPAY was null or undefined when calling nomupaySaleWithTicketErrorPost.');
        }
        if (statusCode === null || statusCode === undefined) {
            throw new Error('Required parameter statusCode was null or undefined when calling nomupaySaleWithTicketErrorPost.');
        }
        if (resultCode === null || resultCode === undefined) {
            throw new Error('Required parameter resultCode was null or undefined when calling nomupaySaleWithTicketErrorPost.');
        }
        if (resultMessage === null || resultMessage === undefined) {
            throw new Error('Required parameter resultMessage was null or undefined when calling nomupaySaleWithTicketErrorPost.');
        }
        if (extraParam === null || extraParam === undefined) {
            throw new Error('Required parameter extraParam was null or undefined when calling nomupaySaleWithTicketErrorPost.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (redirectUrl !== undefined && redirectUrl !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redirectUrl, 'redirectUrl');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xApplicationClientId !== undefined && xApplicationClientId !== null) {
            localVarHeaders = localVarHeaders.set('X-ApplicationClientId', String(xApplicationClientId));
        }

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (orderId !== undefined) {
            localVarFormParams = localVarFormParams.append('OrderId', <any>orderId) as any || localVarFormParams;
        }
        if (mPAY !== undefined) {
            localVarFormParams = localVarFormParams.append('MPAY', <any>mPAY) as any || localVarFormParams;
        }
        if (statusCode !== undefined) {
            localVarFormParams = localVarFormParams.append('StatusCode', <any>statusCode) as any || localVarFormParams;
        }
        if (resultCode !== undefined) {
            localVarFormParams = localVarFormParams.append('ResultCode', <any>resultCode) as any || localVarFormParams;
        }
        if (resultMessage !== undefined) {
            localVarFormParams = localVarFormParams.append('ResultMessage', <any>resultMessage) as any || localVarFormParams;
        }
        if (extraParam !== undefined) {
            localVarFormParams = localVarFormParams.append('ExtraParam', <any>extraParam) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/nomupay/sale-with-ticket/error`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param orderId 
     * @param mPAY 
     * @param statusCode 
     * @param resultCode 
     * @param resultMessage 
     * @param lastTransactionDate 
     * @param maskedCCNo 
     * @param cCTokenId 
     * @param price 
     * @param installmentCount 
     * @param customerIPAddress 
     * @param currencyCode 
     * @param extraParam 
     * @param redirectUrl 
     * @param xApplicationClientId ApplicationClientId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public nomupaySaleWithTicketSuccessPost(orderId: string, mPAY: string, statusCode: number, resultCode: string, resultMessage: string, lastTransactionDate: string, maskedCCNo: string, cCTokenId: string, price: number, installmentCount: number, customerIPAddress: string, currencyCode: string, extraParam: string, redirectUrl?: string, xApplicationClientId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public nomupaySaleWithTicketSuccessPost(orderId: string, mPAY: string, statusCode: number, resultCode: string, resultMessage: string, lastTransactionDate: string, maskedCCNo: string, cCTokenId: string, price: number, installmentCount: number, customerIPAddress: string, currencyCode: string, extraParam: string, redirectUrl?: string, xApplicationClientId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public nomupaySaleWithTicketSuccessPost(orderId: string, mPAY: string, statusCode: number, resultCode: string, resultMessage: string, lastTransactionDate: string, maskedCCNo: string, cCTokenId: string, price: number, installmentCount: number, customerIPAddress: string, currencyCode: string, extraParam: string, redirectUrl?: string, xApplicationClientId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public nomupaySaleWithTicketSuccessPost(orderId: string, mPAY: string, statusCode: number, resultCode: string, resultMessage: string, lastTransactionDate: string, maskedCCNo: string, cCTokenId: string, price: number, installmentCount: number, customerIPAddress: string, currencyCode: string, extraParam: string, redirectUrl?: string, xApplicationClientId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling nomupaySaleWithTicketSuccessPost.');
        }
        if (mPAY === null || mPAY === undefined) {
            throw new Error('Required parameter mPAY was null or undefined when calling nomupaySaleWithTicketSuccessPost.');
        }
        if (statusCode === null || statusCode === undefined) {
            throw new Error('Required parameter statusCode was null or undefined when calling nomupaySaleWithTicketSuccessPost.');
        }
        if (resultCode === null || resultCode === undefined) {
            throw new Error('Required parameter resultCode was null or undefined when calling nomupaySaleWithTicketSuccessPost.');
        }
        if (resultMessage === null || resultMessage === undefined) {
            throw new Error('Required parameter resultMessage was null or undefined when calling nomupaySaleWithTicketSuccessPost.');
        }
        if (lastTransactionDate === null || lastTransactionDate === undefined) {
            throw new Error('Required parameter lastTransactionDate was null or undefined when calling nomupaySaleWithTicketSuccessPost.');
        }
        if (maskedCCNo === null || maskedCCNo === undefined) {
            throw new Error('Required parameter maskedCCNo was null or undefined when calling nomupaySaleWithTicketSuccessPost.');
        }
        if (cCTokenId === null || cCTokenId === undefined) {
            throw new Error('Required parameter cCTokenId was null or undefined when calling nomupaySaleWithTicketSuccessPost.');
        }
        if (price === null || price === undefined) {
            throw new Error('Required parameter price was null or undefined when calling nomupaySaleWithTicketSuccessPost.');
        }
        if (installmentCount === null || installmentCount === undefined) {
            throw new Error('Required parameter installmentCount was null or undefined when calling nomupaySaleWithTicketSuccessPost.');
        }
        if (customerIPAddress === null || customerIPAddress === undefined) {
            throw new Error('Required parameter customerIPAddress was null or undefined when calling nomupaySaleWithTicketSuccessPost.');
        }
        if (currencyCode === null || currencyCode === undefined) {
            throw new Error('Required parameter currencyCode was null or undefined when calling nomupaySaleWithTicketSuccessPost.');
        }
        if (extraParam === null || extraParam === undefined) {
            throw new Error('Required parameter extraParam was null or undefined when calling nomupaySaleWithTicketSuccessPost.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (redirectUrl !== undefined && redirectUrl !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redirectUrl, 'redirectUrl');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xApplicationClientId !== undefined && xApplicationClientId !== null) {
            localVarHeaders = localVarHeaders.set('X-ApplicationClientId', String(xApplicationClientId));
        }

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (orderId !== undefined) {
            localVarFormParams = localVarFormParams.append('OrderId', <any>orderId) as any || localVarFormParams;
        }
        if (mPAY !== undefined) {
            localVarFormParams = localVarFormParams.append('MPAY', <any>mPAY) as any || localVarFormParams;
        }
        if (statusCode !== undefined) {
            localVarFormParams = localVarFormParams.append('StatusCode', <any>statusCode) as any || localVarFormParams;
        }
        if (resultCode !== undefined) {
            localVarFormParams = localVarFormParams.append('ResultCode', <any>resultCode) as any || localVarFormParams;
        }
        if (resultMessage !== undefined) {
            localVarFormParams = localVarFormParams.append('ResultMessage', <any>resultMessage) as any || localVarFormParams;
        }
        if (lastTransactionDate !== undefined) {
            localVarFormParams = localVarFormParams.append('LastTransactionDate', <any>lastTransactionDate) as any || localVarFormParams;
        }
        if (maskedCCNo !== undefined) {
            localVarFormParams = localVarFormParams.append('MaskedCCNo', <any>maskedCCNo) as any || localVarFormParams;
        }
        if (cCTokenId !== undefined) {
            localVarFormParams = localVarFormParams.append('CCTokenId', <any>cCTokenId) as any || localVarFormParams;
        }
        if (price !== undefined) {
            localVarFormParams = localVarFormParams.append('Price', <any>price) as any || localVarFormParams;
        }
        if (installmentCount !== undefined) {
            localVarFormParams = localVarFormParams.append('InstallmentCount', <any>installmentCount) as any || localVarFormParams;
        }
        if (customerIPAddress !== undefined) {
            localVarFormParams = localVarFormParams.append('CustomerIPAddress', <any>customerIPAddress) as any || localVarFormParams;
        }
        if (currencyCode !== undefined) {
            localVarFormParams = localVarFormParams.append('CurrencyCode', <any>currencyCode) as any || localVarFormParams;
        }
        if (extraParam !== undefined) {
            localVarFormParams = localVarFormParams.append('ExtraParam', <any>extraParam) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/nomupay/sale-with-ticket/success`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param statusCode 
     * @param resultCode 
     * @param resultMessage 
     * @param tokenId 
     * @param tokenCustomerId 
     * @param redirectUrl 
     * @param xApplicationClientId ApplicationClientId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public nomupayTokenizeCcErrorPost(statusCode: number, resultCode: string, resultMessage: string, tokenId: string, tokenCustomerId: string, redirectUrl?: string, xApplicationClientId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public nomupayTokenizeCcErrorPost(statusCode: number, resultCode: string, resultMessage: string, tokenId: string, tokenCustomerId: string, redirectUrl?: string, xApplicationClientId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public nomupayTokenizeCcErrorPost(statusCode: number, resultCode: string, resultMessage: string, tokenId: string, tokenCustomerId: string, redirectUrl?: string, xApplicationClientId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public nomupayTokenizeCcErrorPost(statusCode: number, resultCode: string, resultMessage: string, tokenId: string, tokenCustomerId: string, redirectUrl?: string, xApplicationClientId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (statusCode === null || statusCode === undefined) {
            throw new Error('Required parameter statusCode was null or undefined when calling nomupayTokenizeCcErrorPost.');
        }
        if (resultCode === null || resultCode === undefined) {
            throw new Error('Required parameter resultCode was null or undefined when calling nomupayTokenizeCcErrorPost.');
        }
        if (resultMessage === null || resultMessage === undefined) {
            throw new Error('Required parameter resultMessage was null or undefined when calling nomupayTokenizeCcErrorPost.');
        }
        if (tokenId === null || tokenId === undefined) {
            throw new Error('Required parameter tokenId was null or undefined when calling nomupayTokenizeCcErrorPost.');
        }
        if (tokenCustomerId === null || tokenCustomerId === undefined) {
            throw new Error('Required parameter tokenCustomerId was null or undefined when calling nomupayTokenizeCcErrorPost.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (redirectUrl !== undefined && redirectUrl !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redirectUrl, 'redirectUrl');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xApplicationClientId !== undefined && xApplicationClientId !== null) {
            localVarHeaders = localVarHeaders.set('X-ApplicationClientId', String(xApplicationClientId));
        }

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (statusCode !== undefined) {
            localVarFormParams = localVarFormParams.append('StatusCode', <any>statusCode) as any || localVarFormParams;
        }
        if (resultCode !== undefined) {
            localVarFormParams = localVarFormParams.append('ResultCode', <any>resultCode) as any || localVarFormParams;
        }
        if (resultMessage !== undefined) {
            localVarFormParams = localVarFormParams.append('ResultMessage', <any>resultMessage) as any || localVarFormParams;
        }
        if (tokenId !== undefined) {
            localVarFormParams = localVarFormParams.append('TokenId', <any>tokenId) as any || localVarFormParams;
        }
        if (tokenCustomerId !== undefined) {
            localVarFormParams = localVarFormParams.append('TokenCustomerId', <any>tokenCustomerId) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/nomupay/tokenize-cc/error`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param tokenId 
     * @param tokenCustomerId 
     * @param maskedCCNo 
     * @param redirectUrl 
     * @param xApplicationClientId ApplicationClientId
     * @param holderPlatform 
     * @param externalUserId 
     * @param isPrimary 
     * @param directoryId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public nomupayTokenizeCcSuccessPost(tokenId: string, tokenCustomerId: string, maskedCCNo: string, redirectUrl?: string, xApplicationClientId?: string, holderPlatform?: HolderPlatform, externalUserId?: string, isPrimary?: boolean, directoryId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public nomupayTokenizeCcSuccessPost(tokenId: string, tokenCustomerId: string, maskedCCNo: string, redirectUrl?: string, xApplicationClientId?: string, holderPlatform?: HolderPlatform, externalUserId?: string, isPrimary?: boolean, directoryId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public nomupayTokenizeCcSuccessPost(tokenId: string, tokenCustomerId: string, maskedCCNo: string, redirectUrl?: string, xApplicationClientId?: string, holderPlatform?: HolderPlatform, externalUserId?: string, isPrimary?: boolean, directoryId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public nomupayTokenizeCcSuccessPost(tokenId: string, tokenCustomerId: string, maskedCCNo: string, redirectUrl?: string, xApplicationClientId?: string, holderPlatform?: HolderPlatform, externalUserId?: string, isPrimary?: boolean, directoryId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (tokenId === null || tokenId === undefined) {
            throw new Error('Required parameter tokenId was null or undefined when calling nomupayTokenizeCcSuccessPost.');
        }
        if (tokenCustomerId === null || tokenCustomerId === undefined) {
            throw new Error('Required parameter tokenCustomerId was null or undefined when calling nomupayTokenizeCcSuccessPost.');
        }
        if (maskedCCNo === null || maskedCCNo === undefined) {
            throw new Error('Required parameter maskedCCNo was null or undefined when calling nomupayTokenizeCcSuccessPost.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (redirectUrl !== undefined && redirectUrl !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redirectUrl, 'redirectUrl');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xApplicationClientId !== undefined && xApplicationClientId !== null) {
            localVarHeaders = localVarHeaders.set('X-ApplicationClientId', String(xApplicationClientId));
        }

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (tokenId !== undefined) {
            localVarFormParams = localVarFormParams.append('TokenId', <any>tokenId) as any || localVarFormParams;
        }
        if (tokenCustomerId !== undefined) {
            localVarFormParams = localVarFormParams.append('TokenCustomerId', <any>tokenCustomerId) as any || localVarFormParams;
        }
        if (maskedCCNo !== undefined) {
            localVarFormParams = localVarFormParams.append('MaskedCCNo', <any>maskedCCNo) as any || localVarFormParams;
        }
        if (holderPlatform !== undefined) {
            localVarFormParams = localVarFormParams.append('HolderPlatform', <any>holderPlatform) as any || localVarFormParams;
        }
        if (externalUserId !== undefined) {
            localVarFormParams = localVarFormParams.append('ExternalUserId', <any>externalUserId) as any || localVarFormParams;
        }
        if (isPrimary !== undefined) {
            localVarFormParams = localVarFormParams.append('IsPrimary', <any>isPrimary) as any || localVarFormParams;
        }
        if (directoryId !== undefined) {
            localVarFormParams = localVarFormParams.append('DirectoryId', <any>directoryId) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/nomupay/tokenize-cc/success`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
